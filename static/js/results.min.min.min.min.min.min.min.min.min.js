const performanceStart=performance.now();
const AppState={
currentTab: 'itinerary',
currentDay: 1,
searchQuery: '',
activeFilter: 'all',
selectedActivity: null,
isLoading: false,
userPreferences:{
mapType: 'roadmap',
theme: 'light',
notifications: true
}
};
function debounce(func, wait){
let timeout;
return function executedFunction(...args){
const later=()=>{
clearTimeout(timeout);
func(...args);
};
clearTimeout(timeout);
timeout=setTimeout(later, wait);
};
}
function announceToScreenReader(message){
const announcement=document.createElement('div');
announcement.setAttribute('aria-live', 'polite');
announcement.setAttribute('aria-atomic', 'true');
announcement.className='sr-only';
announcement.textContent=message;
document.body.appendChild(announcement);
setTimeout(()=>{
document.body.removeChild(announcement);
}, 1000);
}
function detectKeyboardUser(){
let isKeyboardUser=false;
document.addEventListener('keydown', (e)=>{
if (e.key==='Tab' && !isKeyboardUser){
isKeyboardUser=true;
document.body.classList.add('keyboard-user');
}
});
document.addEventListener('mousedown', ()=>{
if (isKeyboardUser){
isKeyboardUser=false;
document.body.classList.remove('keyboard-user');
}
});
}
function trapFocus(container){
const focusableElements=container.querySelectorAll(
'a[href], button, textarea, input[type="text"], input[type="radio"], input[type="checkbox"], select, [tabindex]:not([tabindex="-1"])'
);
const firstElement=focusableElements[0];
const lastElement=focusableElements[focusableElements.length - 1];
container.addEventListener('keydown', (e)=>{
if (e.key==='Tab'){
if (e.shiftKey){
if (document.activeElement===firstElement){
lastElement.focus();
e.preventDefault();
}
}else{
if (document.activeElement===lastElement){
firstElement.focus();
e.preventDefault();
}
}
}
if (e.key==='Escape'){
container.focus();
}
});
}
function switchTab(tabName){
AppState.currentTab=tabName;
document.querySelectorAll('.tab-btn').forEach(btn=>{
btn.classList.remove('active');
btn.setAttribute('aria-selected', 'false');
btn.setAttribute('tabindex', '-1');
});
document.querySelectorAll('.tab-content-item').forEach(content=>{
content.classList.remove('active');
});
const clickedTab=document.querySelector(`[data-tab="${tabName}"]`);
const tabContent=document.getElementById(tabName);
if (clickedTab && tabContent){
clickedTab.classList.add('active');
clickedTab.setAttribute('aria-selected', 'true');
clickedTab.setAttribute('tabindex', '0');
tabContent.classList.add('active');
if (document.body.classList.contains('keyboard-user')){
clickedTab.focus();
}
setTimeout(()=>{
tabContent.focus();
}, 100);
initializeTabContent(tabName);
if (history.replaceState){
history.replaceState(null, null, `#${tabName}`);
}
announceToScreenReader(`Switched to ${tabName.charAt(0).toUpperCase()+tabName.slice(1)}view`);
GlobePilot.showToast(`Switched to ${tabName.charAt(0).toUpperCase()+tabName.slice(1)}view`, 'success');
}
}
function initializeTabContent(tabName){
switch (tabName){
case 'map':
initializeGoogleMap();
break;
case 'budget':
initializeBudgetView();
break;
case 'documents':
initializeDocumentsView();
break;
case 'itinerary':
displayItineraryData();
break;
}
}
function searchActivities(query){
AppState.searchQuery=query.toLowerCase();
clearSearchHighlights();
if (query.length < 2){
showAllActivities();
return;
}
const activities=document.querySelectorAll('.activity-item');
let matchCount=0;
activities.forEach(activity=>{
const activityText=activity.textContent.toLowerCase();
const isMatch=activityText.includes(AppState.searchQuery);
if (isMatch){
activity.style.display='block';
activity.style.opacity='1';
highlightSearchTerms(activity, query);
matchCount++;
}else{
activity.style.display='none';
activity.style.opacity='0.3';
}
});
updateSearchResults(matchCount, query);
}
function handleSearchKeypress(event){
if (event.key==='Enter'){
const query=event.target.value;
if (query.trim()){
performAdvancedSearch(query);
}
}
}
function performAdvancedSearch(query){
const searchTerms=query.toLowerCase().split(' ');
const activities=document.querySelectorAll('.activity-item');
let results=[];
activities.forEach((activity, index)=>{
const activityData=extractActivityData(activity);
const relevanceScore=calculateRelevance(activityData, searchTerms);
if (relevanceScore > 0){
results.push({element: activity, score: relevanceScore, index});
}
});
results.sort((a, b)=> b.score - a.score);
displaySearchResults(results);
}
function calculateRelevance(activityData, searchTerms){
let score=0;
const text=`${activityData.name}${activityData.location}${activityData.type}`.toLowerCase();
searchTerms.forEach(term=>{
if (activityData.name.toLowerCase().includes(term)) score+=10;
if (activityData.location.toLowerCase().includes(term)) score+=8;
if (activityData.type.toLowerCase().includes(term)) score+=6;
if (text.includes(term)) score+=3;
});
return score;
}
function extractActivityData(activityElement){
return{
name: activityElement.querySelector('.activity-title')?.textContent || '',
location: activityElement.querySelector('.activity-details')?.textContent || '',
type: activityElement.querySelector('.activity-type-badge')?.textContent || '',
cost: activityElement.querySelector('.activity-meta-item.cost')?.textContent || ''
};
}
function highlightSearchTerms(element, query){
const textNodes=getTextNodes(element);
textNodes.forEach(node=>{
const text=node.textContent;
const highlightedText=text.replace(
new RegExp(`(${query})`, 'gi'),
'<mark class="search-highlight">$1</mark>'
);
if (highlightedText !==text){
const wrapper=document.createElement('span');
wrapper.innerHTML=highlightedText;
node.parentNode.replaceChild(wrapper, node);
}
});
}
function getTextNodes(element){
const textNodes=[];
const walker=document.createTreeWalker(
element,
NodeFilter.SHOW_TEXT,
null,
false
);
let node;
while (node=walker.nextNode()){
if (node.textContent.trim()){
textNodes.push(node);
}
}
return textNodes;
}
function clearSearchHighlights(){
const highlights=document.querySelectorAll('.search-highlight');
highlights.forEach(highlight=>{
const parent=highlight.parentNode;
parent.textContent=highlight.textContent;
});
}
function showAllActivities(){
const activities=document.querySelectorAll('.activity-item');
activities.forEach(activity=>{
activity.style.display='block';
activity.style.opacity='1';
});
updateSearchResults(activities.length, '');
}
function updateSearchResults(count, query){
const searchContainer=document.querySelector('.search-container');
let resultsElement=searchContainer.querySelector('.search-results');
if (!resultsElement){
resultsElement=document.createElement('div');
resultsElement.className='search-results';
searchContainer.appendChild(resultsElement);
}
if (query){
resultsElement.innerHTML=`
<div style="padding: 0.5rem;background: #f1f5f9;border-radius: 8px;margin-top: 0.5rem;font-size: 0.875rem;color: #64748b;">
Found ${count}result${count !==1 ? 's' : ''}for "${query}"
${count===0 ? '<button onclick="showAllActivities()" style="margin-left: 0.5rem;background: #6366f1;color: white;border: none;padding: 0.25rem 0.5rem;border-radius: 4px;cursor: pointer;">Show All</button>' : ''}
</div>
`;
}else{
resultsElement.innerHTML='';
}
}
function filterActivities(type){
AppState.activeFilter=type;
document.querySelectorAll('.filter-chip').forEach(chip=>{
chip.classList.remove('active');
chip.setAttribute('aria-pressed', 'false');
});
const activeFilter=event.target.closest('.filter-chip');
if (activeFilter){
activeFilter.classList.add('active');
activeFilter.setAttribute('aria-pressed', 'true');
}
const activities=document.querySelectorAll('.activity-item');
let visibleCount=0;
activities.forEach(activity=>{
const activityType=getActivityTypeFromElement(activity);
const shouldShow=type==='all' ||
(type==='meals' && activityType==='meal') ||
(type==='attractions' && activityType==='attraction') ||
(type==='transport' && (activityType==='transport' || activityType==='flight')) ||
(type==='free' && isFreeActivity(activity));
if (shouldShow){
activity.style.display='block';
activity.style.opacity='1';
activity.removeAttribute('aria-hidden');
visibleCount++;
}else{
activity.style.display='none';
activity.style.opacity='0.3';
activity.setAttribute('aria-hidden', 'true');
}
});
animateFilterChange(visibleCount, type);
const message=`Showing ${visibleCount}${type==='all' ? 'activities' : type}`;
announceToScreenReader(message);
GlobePilot.showToast(message, 'success');
}
function getActivityTypeFromElement(activityElement){
const typeClasses=['flight', 'hotel', 'meal', 'attraction', 'transport'];
return typeClasses.find(type=> activityElement.classList.contains(type)) || 'attraction';
}
function isFreeActivity(activityElement){
const costElement=activityElement.querySelector('.activity-meta-item.cost');
const costText=costElement?.textContent.toLowerCase() || '';
return costText.includes('free') || costText.includes('$0');
}
function animateFilterChange(count, type){
const activities=document.querySelectorAll('.activity-item[style*="display: block"]');
activities.forEach((activity, index)=>{
activity.style.transform='translateY(20px)';
activity.style.opacity='0';
setTimeout(()=>{
activity.style.transform='translateY(0)';
activity.style.opacity='1';
activity.style.transition='all 0.3s ease';
}, index * 50);
});
}
function initializeBudgetView(){
const budgetContent=document.getElementById('budget');
if (!budgetContent) return;
budgetContent.innerHTML=`
<div style="padding: 2rem;">
<h2 style="margin-bottom: 2rem;color: #1e293b;">💰 Budget Breakdown</h2>
<div style="display: grid;grid-template-columns: 1fr 1fr;gap: 2rem;margin-bottom: 2rem;">
<div style="background: var(--glass-bg);padding: 1.5rem;border-radius: 16px;border: 1px solid #e2e8f0;">
<h3 style="color: #6366f1;margin-bottom: 1rem;">📊 Budget Overview</h3>
<div style="margin-bottom: 1rem;">
<div style="display: flex;justify-content: space-between;margin-bottom: 0.5rem;">
<span>Total Budget:</span>
<strong>$3,000</strong>
</div>
<div style="display: flex;justify-content: space-between;margin-bottom: 0.5rem;">
<span>Amount Used:</span>
<strong style="color: #10b981;">$1,900</strong>
</div>
<div style="display: flex;justify-content: space-between;">
<span>Remaining:</span>
<strong style="color: #10b981;">$1,100</strong>
</div>
</div>
</div>
<div style="background: var(--glass-bg);padding: 1.5rem;border-radius: 16px;border: 1px solid #e2e8f0;">
<h3 style="color: #8b5cf6;margin-bottom: 1rem;">📈 Cost Categories</h3>
<div style="margin-bottom: 0.5rem;">
<div style="display: flex;justify-content: space-between;margin-bottom: 0.5rem;">
<span>🏨 Accommodation:</span>
<strong>$800</strong>
</div>
<div style="display: flex;justify-content: space-between;margin-bottom: 0.5rem;">
<span>🍽️ Food & Dining:</span>
<strong>$500</strong>
</div>
<div style="display: flex;justify-content: space-between;margin-bottom: 0.5rem;">
<span>🎭 Activities:</span>
<strong>$400</strong>
</div>
<div style="display: flex;justify-content: space-between;">
<span>🚇 Transportation:</span>
<strong>$200</strong>
</div>
</div>
</div>
</div>
<button onclick="optimizeBudget()" style="background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);color: white;border: none;padding: 1rem 2rem;border-radius: 12px;font-weight: 600;cursor: pointer;transition: all 0.3s ease;">
🔧 Optimize Budget
</button>
</div>
`;
GlobePilot.showToast('Budget view loaded with current spending analysis', 'success');
}
function initializeDocumentsView(){
const docsContent=document.getElementById('documents');
if (!docsContent) return;
docsContent.innerHTML=`
<div style="padding: 2rem;">
<h2 style="margin-bottom: 2rem;color: #1e293b;">📋 Travel Documents</h2>
<div style="display: grid;gap: 1.5rem;">
<div style="background: var(--glass-bg);padding: 1.5rem;border-radius: 16px;border: 1px solid #e2e8f0;">
<h3 style="color: #10b981;margin-bottom: 1rem;">✅ Required Documents</h3>
<div style="display: grid;gap: 0.75rem;">
<div style="display: flex;align-items: center;gap: 0.5rem;">
<span style="color: #10b981;">✓</span>
<span>Valid passport (expires after 2026)</span>
</div>
<div style="display: flex;align-items: center;gap: 0.5rem;">
<span style="color: #10b981;">✓</span>
<span>Travel insurance policy</span>
</div>
<div style="display: flex;align-items: center;gap: 0.5rem;">
<span style="color: #10b981;">✓</span>
<span>Hotel confirmation emails</span>
</div>
<div style="display: flex;align-items: center;gap: 0.5rem;">
<span style="color: #10b981;">✓</span>
<span>Flight confirmation codes</span>
</div>
</div>
</div>
<div style="background: var(--glass-bg);padding: 1.5rem;border-radius: 16px;border: 1px solid #e2e8f0;">
<h3 style="color: #f59e0b;margin-bottom: 1rem;">📱 Recommended Apps</h3>
<div style="display: grid;gap: 0.75rem;">
<div style="display: flex;align-items: center;gap: 0.5rem;">
<span>🚇</span>
<span>NYC Subway (MTA) app for real-time transit</span>
</div>
<div style="display: flex;align-items: center;gap: 0.5rem;">
<span>🗺️</span>
<span>Google Maps offline download</span>
</div>
<div style="display: flex;align-items: center;gap: 0.5rem;">
<span>🎭</span>
<span>TodayTix for Broadway show tickets</span>
</div>
<div style="display: flex;align-items: center;gap: 0.5rem;">
<span>🍽️</span>
<span>OpenTable for restaurant reservations</span>
</div>
</div>
</div>
<div style="background: var(--glass-bg);padding: 1.5rem;border-radius: 16px;border: 1px solid #e2e8f0;">
<h3 style="color: #ef4444;margin-bottom: 1rem;">🚨 Emergency Contacts</h3>
<div style="display: grid;gap: 0.75rem;">
<div style="display: flex;justify-content: space-between;">
<span>Emergency Services:</span>
<strong>911</strong>
</div>
<div style="display: flex;justify-content: space-between;">
<span>Tourist Hotline:</span>
<strong>311</strong>
</div>
<div style="display: flex;justify-content: space-between;">
<span>Embassy/Consulate:</span>
<strong>+1-xxx-xxx-xxxx</strong>
</div>
</div>
</div>
</div>
</div>
`;
GlobePilot.showToast('Documents checklist loaded with essential travel information', 'success');
}
function initializeURLNavigation(){
const hash=window.location.hash.substring(1);
if (hash && ['itinerary', 'map', 'budget', 'documents'].includes(hash)){
switchTab(hash);
}
window.addEventListener('hashchange', ()=>{
const newHash=window.location.hash.substring(1);
if (newHash && ['itinerary', 'map', 'budget', 'documents'].includes(newHash)){
switchTab(newHash);
}
});
}
function addEnhancedStyles(){
const style=document.createElement('style');
style.textContent=`
.search-highlight{
background: #fef3c7;
color: #92400e;
padding: 0.125rem 0.25rem;
border-radius: 4px;
font-weight: 600;
}
.search-results{
animation: slideIn 0.3s ease;
}
@keyframes slideIn{
from{opacity: 0;transform: translateY(-10px);}
to{opacity: 1;transform: translateY(0);}
}
.tab-content-item{
display: none;
animation: fadeIn 0.3s ease;
}
.tab-content-item.active{
display: block;
}
@keyframes fadeIn{
from{opacity: 0;transform: translateY(10px);}
to{opacity: 1;transform: translateY(0);}
}
.activity-item{
scroll-margin-top: 2rem;
}
`;
document.head.appendChild(style);
}
function initializeKeyboardNavigation(){
detectKeyboardUser();
document.addEventListener('keydown', (event)=>{
if (event.ctrlKey || event.metaKey){
switch (event.key){
case '1':
event.preventDefault();
switchTab('itinerary');
break;
case '2':
event.preventDefault();
switchTab('map');
break;
case '3':
event.preventDefault();
switchTab('budget');
break;
case '4':
event.preventDefault();
switchTab('documents');
break;
case 'f':
event.preventDefault();
const searchInput=document.querySelector('.search-input');
if (searchInput){
searchInput.focus();
announceToScreenReader('Search field focused');
}
break;
}
}
if (event.target.closest('.tab-navigation')){
const tabs=document.querySelectorAll('.tab-btn');
const currentTab=document.querySelector('.tab-btn[aria-selected="true"]');
const currentIndex=Array.from(tabs).indexOf(currentTab);
switch (event.key){
case 'ArrowLeft':
case 'ArrowUp':
event.preventDefault();
const prevIndex=currentIndex > 0 ? currentIndex - 1 : tabs.length - 1;
tabs[prevIndex].focus();
tabs[prevIndex].click();
break;
case 'ArrowRight':
case 'ArrowDown':
event.preventDefault();
const nextIndex=currentIndex < tabs.length - 1 ? currentIndex+1 : 0;
tabs[nextIndex].focus();
tabs[nextIndex].click();
break;
case 'Home':
event.preventDefault();
tabs[0].focus();
tabs[0].click();
break;
case 'End':
event.preventDefault();
tabs[tabs.length - 1].focus();
tabs[tabs.length - 1].click();
break;
}
}
if (AppState.currentTab==='itinerary'){
const activities=document.querySelectorAll('.activity-item');
const currentIndex=AppState.selectedActivity || 0;
switch (event.key){
case 'ArrowDown':
event.preventDefault();
if (currentIndex < activities.length - 1){
highlightActivity(currentIndex+1);
}
break;
case 'ArrowUp':
event.preventDefault();
if (currentIndex > 0){
highlightActivity(currentIndex - 1);
}
break;
case 'Enter':
if (activities[currentIndex]){
activities[currentIndex].click();
}
break;
case 'Escape':
const searchInput=document.querySelector('.search-input');
if (searchInput){
searchInput.value='';
showAllActivities();
announceToScreenReader('Search cleared, showing all activities');
}
break;
}
}
});
}
function highlightActivity(index){
AppState.selectedActivity=index;
document.querySelectorAll('.activity-item').forEach(item=>{
item.classList.remove('highlighted');
});
const activities=document.querySelectorAll('.activity-item');
if (activities[index]){
activities[index].classList.add('highlighted');
activities[index].scrollIntoView({behavior: 'smooth', block: 'center'});
const activityData=extractActivityData(activities[index]);
showActivityDetails(activityData, index);
}
}
function showActivityDetails(activityData, index){
const details=`
🎯 Activity Details
📍 ${activityData.name}
📮 ${activityData.location}
🏷️ Type: ${activityData.type}
💰 ${activityData.cost}
Click connection icons to see transportation options between activities.
`;
GlobePilot.showToast(details, 'success');
}
function logPerformance(){
const performanceEnd=performance.now();
const loadTime=performanceEnd - performanceStart;
console.log(`🚀 GlobePiloT Results loaded in ${loadTime.toFixed(2)}ms`);
}
function setupLazyLoading(){
if ('IntersectionObserver' in window){
const imageObserver=new IntersectionObserver((entries, observer)=>{
entries.forEach(entry=>{
if (entry.isIntersecting){
const img=entry.target;
img.src=img.dataset.src;
img.classList.remove('lazy');
imageObserver.unobserve(img);
}
});
});
const images=document.querySelectorAll('img[data-src]');
images.forEach(img=> imageObserver.observe(img));
}
}
document.addEventListener('DOMContentLoaded', function(){
console.log('📄 DOM loaded, initializing enhanced features...');
cleanupUnwantedElements();
addEnhancedStyles();
initializeURLNavigation();
initializeKeyboardNavigation();
setupLazyLoading();
console.log('🎯 App State initialized:', AppState);
window.debouncedSearch=debounce(searchActivities, 300);
if (typeof google !=='undefined' && google.maps){
initializeItineraryWidget();
}else{
setTimeout(()=>{
if (typeof google !=='undefined' && google.maps){
initializeItineraryWidget();
}else{
console.log('⚠️ Google Maps not loaded, initializing without map');
const hasData=loadBackendData();
displayItineraryData();
}
}, 2000);
}
logPerformance();
setTimeout(()=>{
cleanupUnwantedElements();
setTimeout(()=>{
cleanupUnwantedElements();
}, 100);
enhanceTransportDisplay();
GlobePilot.showToast('🎉 Welcome to Enhanced GlobePiloT!\n\n⌨️ Keyboard shortcuts:\n• Ctrl/Cmd+1-4: Switch tabs\n• Ctrl/Cmd+F: Focus search\n• ↑↓ arrows: Navigate activities\n• ESC: Clear search', 'success');
}, 1000);
});
function cleanupUnwantedElements(){
const skipLinks=document.querySelectorAll('.skip-link, a[href*="skip"], a[href*="#main"], a[href*="#nav"], a[href*="#search"]');
skipLinks.forEach(link=>{
link.remove();
});
const allElements=document.querySelectorAll('*');
allElements.forEach(element=>{
if (element.textContent && element.textContent.trim().toLowerCase().includes('skip to')){
element.remove();
}
});
const debugElements=document.querySelectorAll('[data-debug], .debug, .test-element');
debugElements.forEach(element=>{
element.remove();
});
const lowOpacityElements=document.querySelectorAll('[style*="opacity: 0.1"], [style*="opacity:0.1"]');
lowOpacityElements.forEach(element=>{
if (element.textContent.trim()==='' || element.innerHTML.trim()===''){
element.style.display='none';
}
});
const walker=document.createTreeWalker(
document.body,
NodeFilter.SHOW_TEXT,
{
acceptNode: function(node){
if (node.nodeValue.trim().toLowerCase().includes('skip') ||
node.nodeValue.trim().toLowerCase().includes('debug') ||
node.nodeValue.trim().toLowerCase().includes('test')){
return NodeFilter.FILTER_ACCEPT;
}
return NodeFilter.FILTER_SKIP;
}
},
false
);
const unwantedTextNodes=[];
let node;
while (node=walker.nextNode()){
unwantedTextNodes.push(node);
}
unwantedTextNodes.forEach(textNode=>{
textNode.remove();
});
console.log('🧹 Cleanup complete - removed unwanted elements');
}
function enhanceTransportDisplay(){
const activityItems=document.querySelectorAll('.activity-item');
activityItems.forEach(item=>{
const text=item.textContent.toLowerCase();
if (text.includes('taxi') || text.includes('airport') || text.includes('transfer') ||
text.includes('subway') || text.includes('train') || text.includes('uber') ||
text.includes('transport') || text.includes('flight')){
item.classList.add('transport');
const activityDetails=item.querySelector('.activity-details');
if (activityDetails){
let transportInfo=activityDetails.querySelector('.transport-info');
if (!transportInfo && (text.includes('taxi') || text.includes('airport transfer'))){
transportInfo=createEnhancedTransportInfo(text, item);
if (transportInfo){
activityDetails.appendChild(transportInfo);
}
}
}
}
});
addConnectionIcons();
}
function createEnhancedTransportInfo(text, activityItem){
const transportDetails=extractTransportDetails(text, activityItem);
if (!transportDetails) return null;
const transportInfo=document.createElement('div');
transportInfo.className='transport-info';
transportInfo.innerHTML=`
<div class="transport-route">
<div class="transport-route-icon">${transportDetails.icon}</div>
<div class="transport-details">
<div class="transport-title">${transportDetails.title}</div>
<div class="transport-subtitle">${transportDetails.subtitle}</div>
<div class="transport-options">
${transportDetails.options.map(option=>
`<div class="transport-option ${option.type}">${option.text}</div>`
).join('')}
</div>
</div>
</div>
`;
return transportInfo;
}
function extractTransportDetails(text, activityItem){
if (text.includes('taxi') && text.includes('airport')){
return{
icon: '🚕',
title: 'Taxi Route',
subtitle: 'Quick & comfortable airport transfer',
options: [
{type: 'transport-cost', text: '$70 (flat rate+tip)'},
{type: 'transport-duration', text: '30-45 min'},
{type: 'transport-option', text: 'Alternative: AirTrain+Subway ($10)'}
]
};
}
if (text.includes('subway') || text.includes('airtrain')){
return{
icon: '🚇',
title: 'Public Transport',
subtitle: 'Budget-friendly option via AirTrain+Subway',
options: [
{type: 'transport-cost', text: '$10 total'},
{type: 'transport-duration', text: '45-60 min'},
{type: 'transport-option', text: 'MetroCard required'}
]
};
}
if (text.includes('uber') || text.includes('lyft')){
return{
icon: '🚗',
title: 'Rideshare',
subtitle: 'App-based transportation',
options: [
{type: 'transport-cost', text: '$45-80'},
{type: 'transport-duration', text: '30-50 min'},
{type: 'transport-option', text: 'Price varies by demand'}
]
};
}
return null;
}
function addConnectionIcons(){
const activities=document.querySelectorAll('.activity-item');
activities.forEach((activity, index)=>{
if (index < activities.length - 1){
const timeline=activity.querySelector('.activity-timeline');
if (timeline && !timeline.querySelector('.connection-line')){
const connectionLine=document.createElement('div');
connectionLine.className='connection-line';
const connectionIcon=document.createElement('div');
connectionIcon.className='connection-icon taxi';
connectionIcon.setAttribute('aria-label', 'Transportation connection');
connectionIcon.setAttribute('role', 'button');
connectionIcon.setAttribute('tabindex', '0');
connectionLine.appendChild(connectionIcon);
timeline.appendChild(connectionLine);
}
}
});
}
window.switchTab=switchTab;
window.searchActivities=searchActivities;
window.filterActivities=filterActivities;
window.handleSearchKeypress=handleSearchKeypress;
window.initializeBudgetView=initializeBudgetView;
window.initializeDocumentsView=initializeDocumentsView;
window.highlightActivity=highlightActivity;
window.enhanceTransportDisplay=enhanceTransportDisplay;
window.cleanupUnwantedElements=cleanupUnwantedElements;